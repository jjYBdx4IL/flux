import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

description = 'Flux Chess'

group = 'com.fluxchess'
version = '3.0.0-alpha'
ext.releaseBranch = 'master'

if (!project.hasProperty('buildNumber') || !(project.hasProperty('branchName') && branchName == releaseBranch)) {
  // We're probably building on a dev machine or we're building a branch
  ext.buildNumber = 'dev'
}
if (!project.hasProperty('revisionNumber')) {
  // We're probably building on a dev machine
  ext.revisionNumber = 'dev'
}

if (!version.contains('-') && !(project.hasProperty('releaseVersion') && releaseVersion == version)) {
  // Append '-rc' if we're not releasing yet
  version += '-rc'
}

if (version.contains('-')) {
  // Append the buildNumber if we're not releasing
  version += '.' + buildNumber
}

if (version.contains('-') && !(project.hasProperty('branchName') && branchName == releaseBranch)) {
  // Append the revisionNumber if we're not releasing and not on a release branch
  version += '+' + revisionNumber
}

afterEvaluate { println "Building ${name} version ${version}" }

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
  }
}

repositories {
  mavenCentral()
  maven { url "http://maven.fluxchess.com/release" }
}

pmd {
  ignoreFailures = true
}

findbugs {
  ignoreFailures = true
}

checkstyle {
  configFile = new File("${rootDir}/config/checkstyle/checkstyle.xml")
  ignoreFailures = true
  showViolations = false
}

jacocoTestReport {
  reports {
    xml.enabled = true
  }
}

sourceSets {
  integration
}

configurations {
  integrationCompile.extendsFrom testCompile
  integrationRuntime.extendsFrom testRuntime
}

dependencies {
  testCompile 'junit:junit:4.+'
  testCompile 'com.fluxchess:jcpi:1.4.+:tests'
  testCompile 'org.slf4j:slf4j-api:1.7.+'
  testCompile 'org.slf4j:slf4j-log4j12:1.7.+'
  testCompile 'log4j:log4j:1.2.+'

  integrationCompile project(path: ':', configuration: 'testRuntime')
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

processResources {
  filter(ReplaceTokens, tokens: [
      version: project.version,
      buildNumber: project.buildNumber,
      revisionNumber: project.revisionNumber
  ])
}

jar {
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
  manifest {
    attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version, 'Main-Class': 'com.fluxchess.flux.Main'
  }
}

task testsJar(type: Jar, dependsOn: testClasses) {
  classifier = 'tests'
  from sourceSets.test.output
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task integration(type: Test) {
  testClassesDir = sourceSets.integration.output.classesDir
  classpath = sourceSets.integration.runtimeClasspath
}

task dist(type: Zip) {
  def baseDir = "${project.name}-${project.version}"

  into("$baseDir") {
    from('README.md') {
      filter(ReplaceTokens, tokens: [
          version: project.version
      ])
    }
    from 'COPYING'
    from 'COPYING.LESSER'

    from jar
    from sourcesJar
    from javadocJar
  }
}

artifacts {
  testCompile testsJar

  archives testsJar
  archives sourcesJar
  archives javadocJar
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.3'
}
